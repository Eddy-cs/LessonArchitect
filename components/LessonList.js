import { Fragment, useState } from "react";
import {
  Card,
  CardContent,
  Typography,
  IconButton,
  Tooltip,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Avatar,
} from "@mui/material";
import {
  AspectRatio as AspectRatioIcon,
  ListAltOutlined as ListAltOutlinedIcon,
  ContentCopy as ContentCopyIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
} from "@mui/icons-material";

export default function LessonList(props) {
  const [expand, setExpand] = useState(false);
  const [singleContent, setSingleContent] = useState();
  const [searchQuery, setSearchQuery] = useState("");
  const [editOpen, setEditOpen] = useState(false);
  const [deleteOpen, setDeleteOpen] = useState(false);
  const [selectedLesson, setSelectedLesson] = useState(null);
  const [editedTitle, setEditedTitle] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const lessons = props.lessons?.generatedLessons || [];

  const filteredLessons = lessons.filter((lesson) => {
    const searchLower = searchQuery.toLowerCase();
    const lessonDate = new Date(lesson.timestamp.seconds * 1000)
        .toLocaleDateString("en-US", {
          month: "short",
          day: "numeric",
          year: "numeric",
        })
        .toLowerCase();

    return (
        lesson.lessonTitle.toLowerCase().includes(searchLower) ||
        lesson.subject.toLowerCase().includes(searchLower) ||
        lesson.grade.toLowerCase().includes(searchLower) ||
        lessonDate.includes(searchLower)
    );
  });

  const handleEdit = (lesson) => {
    setSelectedLesson(lesson);
    setEditedTitle(lesson.lessonTitle);
    setEditOpen(true);
  };

  const handleDelete = (lesson) => {
    setSelectedLesson(lesson);
    setDeleteOpen(true);
  };

  const confirmEdit = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/firebase-config', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          originalLesson: selectedLesson,
          newTitle: editedTitle
        })
      });

      if (!response.ok) {
        throw new Error('Failed to update lesson');
      }

      const updatedLessons = await response.json();
      props.onUpdate(updatedLessons);
      await props.refreshLessons();
      setEditOpen(false);
    } catch (error) {
      console.error("Error updating lesson:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const confirmDelete = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/firebase-config', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          lessonToDelete: selectedLesson
        })
      });

      if (!response.ok) {
        throw new Error('Failed to delete lesson');
      }

      const updatedLessons = await response.json();
      props.onUpdate(updatedLessons);
      await props.refreshLessons();
      setDeleteOpen(false);
    } catch (error) {
      console.error("Error deleting lesson:", error);
    } finally {
      setIsLoading(false);
    }
  };

  function viewLesson(lessonData) {
    setSingleContent(
        <Card key={lessonData.timestamp}>
          <CardContent sx={{ paddingBottom: 1 }}>
            <Typography variant="h5">{lessonData.lessonTitle}</Typography>
            <div
                style={{
                  display: "grid",
                  gridAutoFlow: "column",
                  justifyContent: "start",
                  alignItems: "center",
                  gap: 10,
                  paddingTop: 3,
                }}
            >
              <Avatar
                  sx={{ width: 24, height: 24 }}
                  src={lessonData.user && lessonData.user.photoURL}
              />
              <Typography variant="subtitle1">
                Generated by {props.lessons.displayName || "Anonymous"}
              </Typography>
            </div>
            <div style={{ display: 'flex', gap: '8px', marginTop: '8px' }}>
              <Tooltip title="Back to List">
                <IconButton onClick={() => setExpand(false)}>
                  <ListAltOutlinedIcon color="primary" fontSize="medium" />
                </IconButton>
              </Tooltip>
              <Tooltip title="Copy to clipboard">
                <IconButton
                    onClick={() => navigator.clipboard.writeText(lessonData.generatedLesson)}
                >
                  <ContentCopyIcon color="primary" fontSize="medium" />
                </IconButton>
              </Tooltip>
            </div>
          </CardContent>
          <CardContent>
            <Typography
                sx={{ whiteSpace: "pre-line", marginTop: -3 }}
                variant="body1"
            >
              {lessonData.generatedLesson}
            </Typography>
          </CardContent>
        </Card>
    );
    setExpand(true);
  }

  const renderLessonTable = () => (
      <>
        <TextField
            label="Search Lessons"
            variant="outlined"
            fullWidth
            margin="normal"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Search by title, subject, grade, or date..."
        />
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell align="center">Actions</TableCell>
                <TableCell>Lesson</TableCell>
                <TableCell align="right">Subject</TableCell>
                <TableCell align="right">Grade</TableCell>
                <TableCell align="right">Date</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredLessons.map((row, index) => (
                  <TableRow key={index}>
                    <TableCell align="center">
                      <div style={{ display: 'flex', gap: '4px', justifyContent: 'center' }}>
                        <Tooltip title="View">
                          <IconButton onClick={() => viewLesson(row)}>
                            <AspectRatioIcon color="primary" fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Edit">
                          <IconButton onClick={() => handleEdit(row)}>
                            <EditIcon color="primary" fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Delete">
                          <IconButton onClick={() => handleDelete(row)}>
                            <DeleteIcon color="error" fontSize="small" />
                          </IconButton>
                        </Tooltip>
                      </div>
                    </TableCell>
                    <TableCell>{row.lessonTitle}</TableCell>
                    <TableCell align="right">{row.subject}</TableCell>
                    <TableCell align="right">{row.grade}</TableCell>
                    <TableCell align="right">
                      {new Date(row.timestamp.seconds * 1000).toLocaleDateString("en-US", {
                        month: "short",
                        day: "numeric",
                        year: "numeric",
                      })}
                    </TableCell>
                  </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </>
  );

  const renderDialogs = () => (
      <>
        <Dialog open={editOpen} onClose={() => setEditOpen(false)}>
          <DialogTitle>Edit Lesson</DialogTitle>
          <DialogContent>
            <TextField
                autoFocus
                margin="dense"
                label="Lesson Title"
                fullWidth
                value={editedTitle}
                onChange={(e) => setEditedTitle(e.target.value)}
                disabled={isLoading}
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setEditOpen(false)} disabled={isLoading}>
              Cancel
            </Button>
            <Button onClick={confirmEdit} color="primary" disabled={isLoading}>
              {isLoading ? 'Saving...' : 'Save'}
            </Button>
          </DialogActions>
        </Dialog>

        <Dialog open={deleteOpen} onClose={() => setDeleteOpen(false)}>
          <DialogTitle>Delete Lesson</DialogTitle>
          <DialogContent>
            Are you sure you want to delete this lesson?
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDeleteOpen(false)} disabled={isLoading}>
              Cancel
            </Button>
            <Button onClick={confirmDelete} color="error" disabled={isLoading}>
              {isLoading ? 'Deleting...' : 'Delete'}
            </Button>
          </DialogActions>
        </Dialog>
      </>
  );

  return (
      <Fragment>
        {expand ? singleContent : renderLessonTable()}
        {renderDialogs()}
      </Fragment>
  );
}